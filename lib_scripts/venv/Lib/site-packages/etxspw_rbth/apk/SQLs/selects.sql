##PRIMEIRO de matrículas
SELECT
                TRIM(p2.nome) as nome,
                TRIM(h.i_funcionarios) as matricula,
                TRIM(pc.i_bancos) as i_bancos,
                TRIM(pc.num_conta) as conta, 
                TRIM(pf.cpf) as cpf,
                TRIM(id_gerado) as id_matricula,
                TRIM(pf.carteira_prof) as ctps,
                TRIM(pf.rg) as rg,
                TRIM(pf.num_pis) as pis,
                TRIM(forma_pagto) as formaPagamento,
                case 
                            when tipo_conta = 1 then 'CORRENTE'
                            when tipo_conta = 2 then 'POUPANCA'
                            when tipo_conta = 3 then 'SALARIO'
                            when tipo_conta = 4 then 'ELETRONICA'
                            when tipo_conta = 5 then 'CHEQUE'
                            when tipo_conta = 6 then 'CORRENTE E POUPANÇA'
                            when tipo_conta = 9 then 'OUTROS'
                        end as tipo_conta
            FROM bethadba.hist_funcionarios h
            JOIN bethadba.pessoas_contas pc on (h.i_pessoas = pc.i_pessoas and h.i_pessoas_contas = pc.i_pessoas_contas)
            JOIN bethadba.pessoas_fisicas pf on (h.i_pessoas = pf.i_pessoas)
            JOIN bethadba.pessoas p2 on (p2.i_pessoas = h.i_pessoas)
            JOIN bethadba.controle_migracao_registro cmr on (cmr.i_chave_dsk2 = h.i_funcionarios)
            where h.dt_alteracoes = (select MAX(hf2.dt_alteracoes) from bethadba.hist_funcionarios hf2 where hf2.i_funcionarios = h.i_funcionarios)
            AND cmr.tipo_registro = 'matricula'
            AND cmr.sistema = 300
            AND h.i_entidades in ({entidades})
            AND bethadba.dbf_getsituacao(1, h.i_entidades, h.i_funcionarios, GETDATE()) != 7
            ORDER BY h.i_funcionarios;



##NOVO MATRICULAS

SELECT
                TRIM(p2.nome) as nome,
                TRIM(h.i_funcionarios) as matricula,
                TRIM(pc.i_bancos) as i_bancos,
                TRIM(pc.num_conta) as conta,
                TRIM(pf.cpf) as cpf,
                TRIM(id_gerado) as id_matricula,
                TRIM(pf.carteira_prof) as ctps,
                TRIM(pf.rg) as rg,
                TRIM(pf.num_pis) as pis,
                TRIM(forma_pagto) as formaPagamento,
                (select i_chave_dsk3 
                        from bethadba.controle_migracao_registro cmr2
                        where cmr2.sistema = cmr.sistema
                        and cmr2.tipo_registro = cmr.tipo_registro 
                        and cmr2.i_chave_dsk1 = h.i_entidades
                        and cmr2.i_chave_dsk2 = h.i_funcionarios
                        and i_chave_dsk3 is not NULL) as tipo_matricula,
                case 
                    when ISNULL(tipo_matricula,'FUNCIONARIO') = ISNULL(i_chave_dsk3,'FUNCIONARIO') then 1
                    else 0
                    end as analisar,
                case
                            when tipo_conta = 1 then 'CORRENTE'
                            when tipo_conta = 2 then 'POUPANCA'
                            when tipo_conta = 3 then 'SALARIO'
                            when tipo_conta = 4 then 'ELETRONICA'
                            when tipo_conta = 5 then 'CHEQUE'
                            when tipo_conta = 6 then 'CORRENTE E POUPANÇA'
                            else 'OUTROS'
                        end as tipo_conta,
                bethadba.dbf_getsituacao(1, h.i_entidades, matricula, GETDATE()) as situacao
            FROM bethadba.hist_funcionarios h
            JOIN bethadba.pessoas_contas pc on (h.i_pessoas = pc.i_pessoas and h.i_pessoas_contas = pc.i_pessoas_contas)
            JOIN bethadba.pessoas_fisicas pf on (h.i_pessoas = pf.i_pessoas)
            JOIN bethadba.pessoas p2 on (p2.i_pessoas = h.i_pessoas)
            JOIN bethadba.controle_migracao_registro cmr on (cmr.i_chave_dsk2 = h.i_funcionarios and cmr.i_chave_dsk1 = h.i_entidades)
            WHERE h.dt_alteracoes = (select MAX(hf2.dt_alteracoes) from bethadba.hist_funcionarios hf2 where hf2.i_funcionarios = h.i_funcionarios and hf2.i_entidades = h.i_entidades)
            AND cmr.tipo_registro = 'matricula'
            AND cmr.sistema = 300
            AND situacao not in (7)
            AND h.i_entidades in ({entidades})
            AND analisar = 1
            ORDER BY h.i_funcionarios;




### FUNCIONARIOS

-- Filtrando o histórico mais recente de cada funcionário
WITH tabelaGeralFuncionario AS (
select  300 as sistema,
        'matricula' as tipo_registro, 
        funcionarios.i_entidades as chave_dsk1,
        funcionarios.i_funcionarios as chave_dsk2,
        bethadba.dbf_get_id_gerado(sistema , tipo_registro,  chave_dsk1, chave_dsk2) as id_matricula,
        tipo = 'FUNCIONARIO',
        dataAlteracao = tabAlt.dataAlteracao,
        dataControlePlano = date(tabAlt.dataAlteracao),
        origemHistorico = tabAlt.origemHistorico,
        dataInicioContrato = funcionarios.dt_admissao,
       (select isnull('CEDIDO','') from bethadba.transferencias a where a.i_funcionarios = funcionarios.i_funcionarios and a.i_entidades = funcionarios.i_entidades and a.tipo = 'C' and a.dt_devolucao is null) as cedidoon ,
        situacaoAux = if cedidoon is null then
                        if bethadba.dbf_gettipoafast(1 ,funcionarios.i_entidades,funcionarios.i_funcionarios, date('2999-12-31') ) = 8 then 8                                                                                          
                    else 
                       bethadba.dbf_getsituacao(1 ,funcionarios.i_entidades,funcionarios.i_funcionarios, date('2999-12-31')  ) 
                    endif       
                       else 
                              if cedidoon = 'CEDIDO' then 988
                              endif
               endif,
        situacao = if situacaoAux = 8 then 'DEMITIDO' else 
                       if situacaoAux = 0 then 'TRABALHANDO' else 
                           if situacaoAux = 9999 then 'FERIAS' else 
                            if situacaoAux = 988 then 'CEDIDO' else 
                               if situacaoAux = 2 then 'AFASTADO' else  'TRABALHANDO' 
                               endif 
                           endif endif
                       endif 
                   endif,  
                   indicativoProvimento =  case funcionarios.provimento
                                                when '1' then 'NORMAL'
                                                when '2' then 'DECORRENTE_DECISAO_JUDICIAL'
                                                else null end,                                    
        controleJornada = case hf.controle_jornada 
                    when 1 then 'SUBMETIDOS_HORARIO_TRABALHO'
                    when 2 then 'ATIVIDADES_EXTERNAS'
                    when 3 then 'OCUPANTE_CARGO_GESTAO'
                    else null end,
        controlaHorasManual = 'false',                    
        inicioVigencia = dateformat(dataAlteracao,'yyyy-mm-dd hh:mm:ss'), 
        dtExercicio = isnull((select max(dt_alteracoes)
                         from bethadba.hist_cargos as hc6
                        where hc6.i_entidades = hc.i_entidades
                          and hc6.i_funcionarios = hc.i_funcionarios
                          and hc6.i_cargos = hc.i_cargos
                          and hc6.dt_alteracoes <= inicioVigencia), '1900-01-01 00:00:00.000000'),       
        pessoa = bethadba.dbf_get_id_gerado(sistema, 'pessoa', funcionarios.i_pessoas ), 
        configuracaoOrganograma = bethadba.dbf_get_id_gerado(sistema, 'configuracao-organograma', hf.i_config_organ),
        organograma = isnull(bethadba.dbf_get_id_gerado(sistema, 'organograma', configuracaoOrganograma , hf.i_organogramas ),''),
        cpfPessoa = (select cpf from bethadba.pessoas_fisicas where pessoas_fisicas.i_pessoas = funcionarios.i_pessoas),
        codigoMatriculaNumero = if(select ctr_contrato_matric from bethadba.parametros_folha) = 'S' then string(left(funcionarios.i_funcionarios,length(funcionarios.i_funcionarios)-(select digitos_matric from bethadba.parametros_folha))) else string(funcionarios.i_funcionarios) endif, 
        codigoMatriculaContrato = if(select ctr_contrato_matric from bethadba.parametros_folha) = 'S' then string(right(funcionarios.i_funcionarios,(select digitos_matric from bethadba.parametros_folha))) else ' ' endif, 
        codigoMatriculaDigitoVerificador = case funcionarios.dv
                                                when '' then null
                                                else funcionarios.dv end,
        numero = codigoMatriculaNumero,
        contrato = codigoMatriculaContrato,
        eSocial = funcionarios.codigo_esocial,
        grupoFuncional =  bethadba.dbf_get_id_gerado(sistema, 'grupo-funcional', hf.i_entidades||'-'||hf.i_grupos ),
        rendimentoMensal = hs.salario,
        conselheiroTutelar = isnull(if funcionarios.conselheiro_tutelar = 'S' then 'true' else 'false' endif, 'false'),
        formaPagamento = case isnull(hf.forma_pagto,'D') 
                              when 'D' then 'DINHEIRO'
                              when 'C' then 'CHEQUE'
                              when 'R' then 'CREDITO_EM_CONTA' end,
        descricao = codigoMatriculaNumero||if(select ctr_contrato_matric from bethadba.parametros_folha) = 'S' then '/'endif||codigoMatriculaContrato||'-'||codigoMatriculaDigitoVerificador,
        bancoConta = bethadba.dbf_get_id_gerado(sistema, 'banco', isnull(hf.i_bancos,0)),
        agenciaConta = bethadba.dbf_get_id_gerado(sistema, 'agencia-bancaria', isnull(bancoConta,'0'), hf.i_agencias ), 
        contaBancaria = (select num_conta from bethadba.pessoas_contas pc where pc.i_pessoas = funcionarios.i_pessoas and pc.i_pessoas_contas = hf.i_pessoas_contas),
        contaBancariaPagamento = bethadba.dbf_get_id_gerado(sistema, 'contas-bancarias', pessoa , isnull(agenciaConta,'0'), numeroConta||trim(digitoConta) ), 
        numeroConta = isnull(bethadba.dbf_retira_caracteres_especiais(left(contaBancaria,length(contaBancaria)-1)),' '),
        digitoConta = isnull(right(contaBancaria,1),' '),
        situacaoConta = (select 
                    if status = 'A' then 'ABERTA' else 'ENCERRADA' endif as situacao 
                      from bethadba.pessoas_contas pc2
                    where pc2.i_pessoas = funcionarios.i_pessoas 
                      and pc2.i_pessoas_contas = hf.i_pessoas_contas),
        historico = 'false',
        dataBase = funcionarios.dt_base,
        vinculoEmpregaticio = bethadba.dbf_get_id_gerado(sistema, 'vinculo-empregaticio', hf.i_vinculos),  
        contratoTemporario = if vinculos.vinculo_temp = 'S' then 'true' else 'false' endif,
        indicativoAdmissao = isnull(case funcionarios.situacao_admissional //Situação admissional(1-Normal,2-Decorrente de ação fiscal,3-Decorrente de decisão judicial)
                                when '1' then 'NORMAL' 
                                when '2' then 'DECORRENTE_ACAO_FISCAL'
                                when '3' then 'DECORRENTE_DECISAO_JUDICIAL' else 'NORMAL' end,'NORMAL'),
        naturezaAtividade = isnull(if hf.tipo_trabalhador = 1 then 'URBANO' else if hf.tipo_trabalhador = 2 then 'RURAL' else 'URBANO' endif endif,'URBANO'),
        tipoAdmissao = if isnull(hf.tipo_admissao,0) in (3,4) then 'TRANSFERENCIA' else 'ADMISSAO' endif,        
        primeiroEmprego = if isnull(hf.tipo_admissao,2) = 1 then 'true' else 'false' endif,
        optanteFgts = if hf.optante_fgts = 'S' then 'true' else 'false' endif,
        dataOpcao = isnull(string(funcionarios.dt_opcao_fgts),' '),
        contaFgts = isnull(funcionarios.conta_fgts,' '),
        sindicato = bethadba.dbf_get_id_gerado(sistema, 'pessoa', isnull(hf.i_sindicatos,0) ) ,
        tipoProvimento = isnull(case funcionarios.tipo_provimento 
                                when '1' then 'NOMEACAO_CARGO_EFETIVO' 
                                when '2' then 'NOMEACAO_CARGO_COMISSAO'
                                when '3' then 'INCORPORACAO_MATRICULA_OU_NOMEACAO_MILITAR' 
                when '5' then 'REDISTRIBUICAO' 
                when '6' then 'DIPLOMACAO' 
                when '7' then 'CONTRATACAO_POR_TEMPO_DETERMINADO' 
                when '8' then 'REMOCAO_EM_CASO_DE_ALTERACAO_DO_ORGAO_DECLARANTE' 
                when '9' then 'DESIGNACAO' 
                when '10' then 'MUDANCA_DE_CPF' 
                when '90' then 'OUTRAS' 
                else ' ' end,' '),
        leiContrato = bethadba.dbf_get_id_gerado(sistema, 'ato', isnull(hc.i_atos,0) ),
        concurso_aux = (select hc5.i_concursos
                         from bethadba.hist_cargos as hc5
                        where hc5.i_entidades = hc.i_entidades
                          and hc5.i_funcionarios = hc.i_funcionarios
                          and hc5.dt_alteracoes = bethadba.dbf_getdatahiscar(hc5.i_entidades,hc5.i_funcionarios,funcionarios.dt_admissao)),
        concurso = bethadba.dbf_get_id_gerado(sistema, 'concurso', hc.i_entidades, concurso_aux),
        dataNomeacao = isnull(string(hc.dt_nomeacao),' '),
        dataPosse = isnull(string(hc.dt_posse),' '),
        tempoAposentadoria = case hf.multiplic 
            when  '1.00' then 'MASCULINO_35_ANOS'
            when '1.20'  then 'MASCULINO_25_ANOS'
            when '1.50'  then 'MASCULINO_20_ANOS'
            when '2.00'  then 'MASCULINO_15_ANOS'
            else ' ' end,
            hipoteseLegalContratoTemporario = isnull(case funcionarios.motivo_contratacao 
                                when '1' then 'NECESSIDADE_SUBSTITUICAO_TRANSITORIA_PESSOAL' 
                                when '2' then 'DEMANDA_COMPLEMENTAR_DE_SERVICO'
                                else ' ' end,' '),
        motivoContratoTemporario = isnull(left(funcionarios.just_contratacao, ' '), 99),
        previdenciaFederal = if hf.prev_federal = 'S' then 'true' else 'false' endif,
        previdenciaEstadual = if hf.prev_estadual = 'S' then 'true' else 'false' endif,
        fundoAssistencia = if hf.fundo_ass = 'S' then 'true' else 'false' endif,
        fundoPrevidencia = if hf.fundo_prev = 'S' then 'true' else 'false' endif,
        fundoFinanceiro = if hf.fundo_financ = 'S' then 'true' else 'false' endif,
        atoAlteracaoCargo = if origemHistorico <> 'CARGO' then null else bethadba.dbf_get_id_gerado(sistema, 'ato', isnull(hc.i_atos,0) ) endif,
        motivoAlteracaoCargo = if origemHistorico <> 'CARGO' then null else bethadba.dbf_get_id_gerado(sistema, 'motivo-alteracao-cargo', isnull(hc.i_motivos_altcar,0) ) endif, 
        areaAtuacaoCodigo = isnull((select first a.i_areas_atuacao from bethadba.hist_areas_atuacao a where a.i_entidades = hf.i_entidades and a.i_funcionarios = hf.i_funcionarios order by dt_alteracoes desc), 0),
        areaAtuacao = bethadba.dbf_get_id_gerado(sistema, 'area-atuacao', areaAtuacaoCodigo),
        motivoAlteracaoAreaAtuacao = ' ',
        ocupaVaga = if funcionarios.conta_vaga = 'S' then 'true' else 'false' endif,
        atoContrato = bethadba.dbf_get_id_gerado(sistema, 'ato', isnull(hc.i_atos,0) ) , 
        atoAlteracaoSalario = if origemHistorico <> 'SALARIO' then null else bethadba.dbf_get_id_gerado(sistema, 'ato', isnull(hs.i_atos,0) ) endif,
        atoAlteracaoSalarioComissionado = if cargoComissionado is not null then 
                                             bethadba.dbf_get_id_gerado(sistema, 'ato', isnull(hs.i_atos,0) ) 
                                          endif,  
        motivoAlteracaoSalario = if origemHistorico <> 'SALARIO' then null else bethadba.dbf_get_id_gerado(sistema, 'motivo-alteracao-salarial', isnull(hs.i_motivos_altsal,0) ) endif,
        motivoAlteracaoSalarioComissionado = if cargoComissionado is not null then
                                                bethadba.dbf_get_id_gerado(sistema, 'motivo-alteracao-salarial', isnull(hs.i_motivos_altsal,0) ) 
                                             endif ,   
        origemSalario = 'CARGO',
        codNivel = hs.i_niveis ,
        planoSalarial = (select i_planos_salariais from bethadba.niveis nv where nv.i_entidades = hs.i_entidades and nv.i_niveis = hs.i_niveis ),
        nivelSalarial = bethadba.dbf_get_id_gerado(sistema, 'nivel-salarial', isnull(hs.i_entidades,0) , planoSalarial , hs.i_niveis), 
        classeSalarial = isnull(hs.i_clas_niveis,' '),
        referenciaSalarial = isnull(hs.i_referencias,' '),
        classeReferencia =  bethadba.dbf_get_id_gerado(sistema, 'classe-referencia', isnull(nivelSalarial,'0'), classeSalarial , referenciaSalarial ),
        dataSaidaCargo = hc.dt_saida,
        dataSaidaCargoAnterior = (select hc1.dt_saida
                from    bethadba.hist_cargos hc1 join 
                bethadba.cargos c1 join 
                bethadba.tipos_cargos tc1
            where
                hc1.i_entidades=hc.i_entidades and 
                hc1.i_funcionarios=hc.i_funcionarios and 
                hc1.dt_alteracoes = bethadba.dbf_getdatahiscar(hc.i_entidades,hc.i_funcionarios,seconds(hc.dt_alteracoes,-1))), 
         dataSaidaCargoComissionado = if cargoComissionado is not null then
                                         hc.dt_saida 
                                     endif , 
        classifCargo = tipos_cargos.classif,
        classifCargoAnterior = (select tc1.classif 
                from      bethadba.hist_cargos hc1 join 
                  bethadba.cargos c1 join 
                  bethadba.tipos_cargos tc1
                where
                     hc1.i_entidades=hc.i_entidades and 
                     hc1.i_funcionarios=hc.i_funcionarios and 
                     hc1.dt_alteracoes = bethadba.dbf_getdatahiscar(hc.i_entidades,hc.i_funcionarios,seconds(hc.dt_alteracoes,-1))),  
        codCargo = hc.i_cargos,
        codCargoAnterior = (select hc1.i_cargos 
            from      bethadba.hist_cargos hc1 join 
                  bethadba.cargos c1 join 
                      bethadba.tipos_cargos tc1
            where
                 hc1.i_entidades=hc.i_entidades and 
                 hc1.i_funcionarios=hc.i_funcionarios and 
                     hc1.dt_alteracoes = bethadba.dbf_getdatahiscar(hc.i_entidades,hc.i_funcionarios,seconds(hc.dt_alteracoes,-1))),
        cargoAux = isnull(if classifCargo = 2 and classifCargoAnterior = 1 and dataSaidaCargoAnterior is null then codCargoAnterior else codCargo endif,codCargo),
        cargo = isnull( if classifCargo = 2 and classifCargoAnterior = 1 and dataSaidaCargoAnterior is null then 
                            bethadba.dbf_get_id_gerado(sistema, 'cargo', hc.i_entidades,codCargoAnterior ) else 
                            bethadba.dbf_get_id_gerado(sistema, 'cargo', hc.i_entidades,codCargo ) 
                        endif, 
                            bethadba.dbf_get_id_gerado(sistema, 'cargo', hc.i_entidades,codCargo )
                       ),
        cargoComissionado = if (classifCargo = 2 and classifCargoAnterior = 1 and dataSaidaCargoAnterior is null) then 
                                bethadba.dbf_get_id_gerado(sistema, 'cargo', hc.i_entidades,codCargo ) 
                            endif,
        areaAtuacaoComissionado = ' ',
        ocupaVagaComissionado = 'false',
        salarioComissionado = if cargoComissionado is not null then hs.salario endif,
        unidadePagamento = case funcionarios.categoria //Categoria do Funcionário (M-Mensalista, Q-Quinzenalista, S-Semanalista, D-Diarista, H-Horista, T-Tarefeiro, O-Outros)
            when 'M' then 'MENSALISTA'
            when 'Q' then 'QUINZENALISTA'
            when 'S' then 'SEMANALISTA'
            when 'D' then 'DIARISTA'
            when 'H' then 'HORISTA'
            when 'T' then 'TAREFEIRO'
            when 'O' then 'OUTROS' else ' ' end,
        configuracaoFerias = bethadba.dbf_get_id_gerado(sistema, 'configuracao-ferias', isnull(cargos_compl.i_config_ferias,0)), 
        quantidadeHorasMes = isnull(cast(hs.horas_mes as numeric),0),
        quantidadeHorasSemana = isnull(cast(hs.horas_sem as numeric),0),
        jornadaParcial = isnull(if controla_jornada_parc = 1 then 'true' else 'false' endif,'false'),
        dataAgendamentoRescisao = isnull(string((select min(dt_fim_vinculo) from bethadba.funcionarios_vinctemp fv where fv.i_funcionarios = funcionarios.i_funcionarios and fv.i_entidades=funcionarios.i_entidades)),' '),
        dataTerminoContratoTemporario = isnull(string((select max(dt_fim_vinculo) from bethadba.funcionarios_vinctemp fv where fv.i_funcionarios = funcionarios.i_funcionarios and fv.i_entidades=funcionarios.i_entidades)),' '),
        dataProrrogacaoContratoTemporario = isnull(string((select max(dt_fim_vinculo) from bethadba.funcionarios_vinctemp fv where fv.i_funcionarios = funcionarios.i_funcionarios and fv.i_entidades=funcionarios.i_entidades)),' '),
        tipoInclusaoContratoTemporario = if vinculos.vinculo_temp = 'S' then 'CONTRATACAO_SUPERIOR_TRES_MESES' else ' ' endif,
        jornadaTrabalho = bethadba.dbf_get_id_gerado(sistema, 'jornada-trabalho', hf.i_entidades,  hf.i_turmas),
        numeroCartaoPonto = hf.num_cp,
        enviaresocial = isnull(if funcionarios.enviar_esocial = 'S' then 'true' else 'false' endif,'false'),
        registropreliminaresocials = 'false',
        registraPonto = if hf.bate_cartao = 'S' then 'true' else 'false' endif,
        profissionalSaudeSegurancaPublica = isnull(if funcionarios.vinculado_saude_seg_publica = 'S' then 'true' else 'false' endif, 'false'),
        ocorrenciaSefip = case hf.ocorrencia_sefip
                               when 0 then 'NUNCA_EXPOSTO_AGENTES_NOCIVOS'
                               when 1 then 'NUNCA_EXPOSTO_AGENTES_NOCIVOS'
                               when 2 then 'EXPOSTO_APOSENTADORIA_15_ANOS'
                               when 3 then 'EXPOSTO_APOSENTADORIA_20_ANOS'
                               when 4 then 'EXPOSTO_APOSENTADORIA_25_ANOS'
                               when 5 then 'NUNCA_EXPOSTO_AGENTES_NOCIVOS'
                               when 6 then 'EXPOSTO_APOSENTADORIA_15_ANOS'
                               when 7 then 'EXPOSTO_APOSENTADORIA_20_ANOS'
                               when 8 then 'EXPOSTO_APOSENTADORIA_25_ANOS'
                          else
                              ''
                          end,
        salarioAlterado = if origemHistorico = 'SALARIO' then 'true' else 'false' endif,
        cargoAlterado = if origemHistorico = 'CARGO' then 'true' else 'false' endif                                          
    from
        bethadba.funcionarios,
        bethadba.hist_cargos hc left outer join
        bethadba.concursos on(hc.i_entidades = concursos.i_entidades and hc.i_concursos = concursos.i_concursos),
        bethadba.hist_funcionarios hf, 
        bethadba.hist_salariais hs left outer join bethadba.niveis on niveis.i_entidades = hs.i_entidades and niveis.i_niveis = hs.i_niveis left outer join 
        bethadba.planos_salariais on planos_salariais.i_planos_salariais = niveis.i_planos_salariais,( select  entidade=f.i_entidades,
                                                                                                        funcionario=f.i_funcionarios,
                                                                                                        dataAlteracao = hf.dt_alteracoes,
                                                                                                        origemHistorico = 'FUNCIONARIO'
                                                                                                        from bethadba.funcionarios f 
                                                                                                        join bethadba.hist_funcionarios hf on (f.i_entidades=hf.i_entidades and f.i_funcionarios=hf.i_funcionarios and hf.dt_alteracoes <= isnull((select first afast.dt_afastamento
                                                                                                                                                                                                                                                     from bethadba.afastamentos afast
                                                                                                                                                                                                                                                    where afast.i_entidades = f.i_entidades and 
                                                                                                                                                                                                                                                          afast.i_funcionarios = f.i_funcionarios and 
                                                                                                                                                                                                                                                          afast.i_tipos_afast = (select tipos_afast.i_tipos_afast
                                                                                                                                                                                                                                                                                   from bethadba.tipos_afast 
                                                                                                                                                                                                                                                                                  where tipos_afast.i_tipos_afast = afast.i_tipos_afast and 
                                                                                                                                                                                                                                                                                        tipos_afast.classif = 9)),date('2999-12-31'))) 
                                                                                                        union 
                                                                                                        select entidade=f.i_entidades,
                                                                                                               funcionario=f.i_funcionarios,
                                                                                                               dataAlteracao = hc.dt_alteracoes ,
                                                                                                               origemHistorico = 'CARGO'
                                                                                                        from bethadba.funcionarios f 
                                                                                                        join bethadba.hist_cargos hc on (f.i_entidades=hc.i_entidades and f.i_funcionarios=hc.i_funcionarios and hc.dt_alteracoes <= isnull((select first afast.dt_afastamento
                                                                                                                                                                                                                                             from bethadba.afastamentos afast
                                                                                                                                                                                                                                            where afast.i_entidades = f.i_entidades and 
                                                                                                                                                                                                                                                  afast.i_funcionarios = f.i_funcionarios and 
                                                                                                                                                                                                                                                  afast.i_tipos_afast = (select tipos_afast.i_tipos_afast
                                                                                                                                                                                                                                                                           from bethadba.tipos_afast 
                                                                                                                                                                                                                                                                          where tipos_afast.i_tipos_afast = afast.i_tipos_afast and 
                                                                                                                                                                                                                                                                                tipos_afast.classif = 9)),date('2999-12-31')))  
                                                                                                                                                                                                                                                                                                            where not exists( select distinct 1 from bethadba.hist_funcionarios hf 
                                                                                                                                                                                                                                                                                                                                    where hf.i_entidades = hc.i_entidades and 
                                                                                                                                                                                                                                                                                                                                    hf.i_funcionarios= hc.i_funcionarios and 
                                                                                                                                                                                                                                                                                                                                    hf.dt_alteracoes = hc.dt_alteracoes)
                                                                                                        union 
                                                                                                        select  entidade=f.i_entidades,
                                                                                                                funcionario=f.i_funcionarios,
                                                                                                                dataAlteracao = hs.dt_alteracoes,
                                                                                                                origemHistorico = 'SALARIO' 
                                                                                                                from bethadba.funcionarios f 
                                                                                                        join bethadba.hist_salariais hs on (f.i_entidades=hs.i_entidades and f.i_funcionarios=hs.i_funcionarios and hs.dt_alteracoes <= isnull((select first afast.dt_afastamento
                                                                                                                                                                                                                                                 from bethadba.afastamentos afast
                                                                                                                                                                                                                                                where afast.i_entidades = f.i_entidades and 
                                                                                                                                                                                                                                                      afast.i_funcionarios = f.i_funcionarios and 
                                                                                                                                                                                                                                                      afast.i_tipos_afast = (select tipos_afast.i_tipos_afast
                                                                                                                                                                                                                                                                               from bethadba.tipos_afast 
                                                                                                                                                                                                                                                                              where tipos_afast.i_tipos_afast = afast.i_tipos_afast and 
                                                                                                                                                                                                                                                                                    tipos_afast.classif = 9)),date('2999-12-31')))
                                                                                                        where not exists( select distinct 1 from bethadba.hist_funcionarios hf 
                                                                                                                                where hf.i_entidades = hs.i_entidades and 
                                                                                                                                hf.i_funcionarios= hs.i_funcionarios and 
                                                                                                                                hf.dt_alteracoes = hs.dt_alteracoes) 
                                                                                                        and not exists( select distinct 1 from bethadba.hist_cargos hc 
                                                                                                                                where hs.i_entidades = hc.i_entidades and 
                                                                                                                                hs.i_funcionarios= hc.i_funcionarios and 
                                                                                                                                hs.dt_alteracoes = hc.dt_alteracoes)
                                                                                                        order by dataAlteracao) as tabAlt,
        bethadba.pessoas left outer join
        bethadba.pessoas_fisicas on (pessoas.i_pessoas = pessoas_fisicas.i_pessoas),
        bethadba.cargos,
        bethadba.tipos_cargos,
        bethadba.cargos_compl,
        bethadba.vinculos
        where  
        funcionarios.i_entidades = tabAlt.entidade and
        funcionarios.i_funcionarios = tabAlt.funcionario and
        tipos_cargos.i_tipos_cargos = cargos.i_tipos_cargos and 
        cargos.i_cargos = hc.i_cargos and 
        cargos.i_entidades = hc.i_entidades and
        funcionarios.i_funcionarios = hf.i_funcionarios and  
        funcionarios.i_entidades = hf.i_entidades and 
        pessoas.i_pessoas = funcionarios.i_pessoas and 
        hf.i_funcionarios = hc.i_funcionarios and 
        hf.i_entidades = hc.i_entidades and 
        hs.i_funcionarios = hc.i_funcionarios and 
        hs.i_entidades = hc.i_entidades and 
        hs.dt_alteracoes = bethadba.dbf_GetDataHisSal(hs.i_entidades, hs.i_funcionarios, dataAlteracao) and 
        hf.dt_alteracoes = bethadba.dbf_GetDataHisFun(hf.i_entidades, hf.i_funcionarios, dataAlteracao) and 
        hc.dt_alteracoes = bethadba.dbf_GetDataHisCar(hc.i_entidades, hc.i_funcionarios, dataAlteracao) and
        hf.i_vinculos = vinculos.i_vinculos and
        cargos_compl.i_entidades=cargos.i_entidades and
        cargos_compl.i_cargos = cargos.i_cargos and 
        funcionarios.tipo_func = 'F' and
        vinculos.categoria_esocial <> 901 and
        situacao != 'DEMITIDO'
        /*not exists(select 1 from bethadba.funcionarios_prop_adic 
                    where funcionarios_prop_adic.i_entidades = funcionarios.i_entidades
                      and funcionarios_prop_adic.i_funcionarios = funcionarios.i_funcionarios  
                      and funcionarios_prop_adic.i_caracteristicas = " + laCaracteristica + ")*/
);
SELECT * from tabelaGeralFuncionario t1 WHERE t1.dataAlteracao = (
    SELECT MAX(t2.dataAlteracao)
    FROM tabelaGeralFuncionario AS t2
    WHERE t1.chave_dsk2 = t2.chave_dsk2 
      AND t1.chave_dsk1 = t2.chave_dsk1
);            