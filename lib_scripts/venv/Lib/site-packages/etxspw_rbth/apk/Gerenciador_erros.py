import time
import re
import pandas as pd
#import json


inicializar_erros_matriculas = {
    "NOME": [],
    "MATRICULA": [],
    "MATRICULA_NAO_ENCONTRADA": [],
    "FORMA_PAGAMENTO": [],
    "CPF": [],
    "DATA_NASCIMENTO": [],
    "MATRICULA_SEM_CPF": [],
    "RG": [],
    "CTPS": [],
    "PIS": [],
    "SEXO": [],
    "CONTA_BANCARIA": [],
    "TIPO_CONTA": [],
    "MATRICULA_SEM_CONTA_BANCARIA": [],
    "ORGANOGRAMA": [],
    "TIPO_MATRICULA": [],
    "TIPO_PREVIDENCIA": [],
    "NIVEL_SALARIAL": [],
    "CONSELHEIRO_TUTELAR_INVALIDO": [],
    "VINCULO_EMPREGATICIO": [],
    "DATA_INICIO_CONTRATO": [],
    "DATA_BASE": [],
    "ORGAO_EMIS_RG": [],
    "UF_EMIS_RG": [],
    "DT_EMIS_RG": [],
    "RIC": [],
    "DT_EMISSAO_RIC": [],
    "ORGAO_RIC": [],
    "SERIE_CART": [],
}

inicializar_erros_eventos = {
    "INCIDENCIA_PREVIDENCIA_SOCIAL": [],
    "INCIDENCIA_IRRF": [],
    "INCIDENCIA_FGTS": [],
    "INCIDENCIA_CONTRIBUICAO_SINDICAL_LABORAL": [],
    "INCIDENCIA_RPPS": [],
    "ENVIA_ESOCIAL": [],
    "CODIGO_ESOCIAL": [],
    "NATUREZA_RUBRICA": [],
    "CODIGO_RUBRICA": [],
    "CLASSIFICACAO_EVENTO": [],
    "ENVIA_TRANSPARENCIA": [],
    "ENVIA_RAIS": [],
    "TETO_REMUNERATORIO": [],
    "TABELA_RUBRICAS": [],
}

inicializar_erros_enderecos = {
    "PESSOA_ENDERECO_NAO_ENCONTRADO": [],
    "PESSOA_ENDERECO_A_MAIS": [],
    "PESSOA_ENDERECO_INCORRETO": [],
}

inicializar_erros_cargos = {
    "CODIGO_TCE": [],
    "DATA_A_VIGORAR": [],
}

inicializar_erros_dependentes = {
    "DEPENDENTE_NAO_ENCONTRADO_NO_CLOUD": [],
    "PESSOA_DEPENDENTE_DADO_INCORRETO": [],
    "DEPENDENTE_A_MAIS_NO_CLOUD": [],
}


class GerenciadorErros:
    def __init__(self, desk, cloud, descricao):#, desk_matricula, cloud_matricula, id_matricula):
        self.identificador_desk = desk
        self.identificador_cloud = cloud
        self.descricao = descricao  # Em geral será o id do item no cloud

    @staticmethod
    def remover_nao_digitos(s):
        if s is None:
            return None
        
        # A regex '[^0-9]' identifica qualquer caractere que não seja um dígito de 0 a 9.
        return re.sub('[^0-9]', '', str(s))


def safe_get(dicionario, *chaves):
    valor = dicionario
    for chave in chaves:
        if isinstance(valor, dict):
            valor = valor.get(chave, None)
        else:
            return None
    return valor

def erro_sem_id(execucaoPrincipal, dado_desktop, erro):
    gerenciadorErros = GerenciadorErros(dado_desktop, "NAO_MIGRADO", "NAO_MIGRADO")
    execucaoPrincipal.inserir_erro(tipo_erro=erro,
                                   gerenciadorErros=gerenciadorErros,
                                   desktop=dado_desktop,
                                   cloud="")

def tipar_df(df1, df2, coluna, tipo):
    df1[coluna] = df1[coluna].astype(tipo)
    df2[coluna] = df2[coluna].astype(tipo)

def checar_discrepancias_matricula(rows, buscaMatricula, execucaoPrincipal):
    # Esta função aceita objetos que contêm informações do desk e do cloud.
    # As funções 'busca_pessoa' e 'encontrar_conta_by_id' são assumidas como predefinidas externamente.
    matricula = buscaMatricula.historico_matricula
    desk_matricula = rows.matricula

    # Não faz análise de autonomos - exceto conselheiros tutelares
    if rows.tipo_func == "A" and rows.conselheiro_tutelar == 'N':
        return

    if matricula.get("tipo", '') == "PENSIONISTA":
        return
        #TODO Criar as validações corretas pra quando for pensionista

    if(matricula['codigoMatricula']['contrato']):
        cloud_matricula = f"{matricula['codigoMatricula']['numero']}{matricula['codigoMatricula']['contrato']:02}"
    else:
        cloud_matricula = matricula['codigoMatricula']['numero']


    gerenciadorErros = GerenciadorErros(desk_matricula, cloud_matricula, matricula['id'])
    pessoa = buscaMatricula.historico_pessoa

    if rows.tipo_matricula != "APOSENTADO" and desk_matricula != str(cloud_matricula):
        execucaoPrincipal.inserir_erro(tipo_erro="MATRICULA", gerenciadorErros=gerenciadorErros, desktop=desk_matricula, cloud=cloud_matricula)

    # usando o mesmo tipo de erro para conselheiro que não migrou como func e pra conselheiro sem a flag marcada
    eh_conselheiro = 'S' if matricula.get("conselheiroTutelar", False) else 'N'
    if rows.conselheiro_tutelar == 'S' and matricula["tipo"] != "FUNCIONARIO": 
        execucaoPrincipal.inserir_erro(tipo_erro="CONSELHEIRO_TUTELAR_INVALIDO", gerenciadorErros=gerenciadorErros, desktop=desk_matricula, cloud=cloud_matricula)
    if rows.conselheiro_tutelar != eh_conselheiro: 
        execucaoPrincipal.inserir_erro(tipo_erro="CONSELHEIRO_TUTELAR_INVALIDO", gerenciadorErros=gerenciadorErros, desktop=desk_matricula, cloud=cloud_matricula)

    if rows.situacao == 8 and matricula['situacao'] != 'APOSENTADO':
        execucaoPrincipal.inserir_erro(tipo_erro="TIPO_MATRICULA", gerenciadorErros=gerenciadorErros, desktop='APOSENTADO', cloud=matricula['situacao'])
        return  #TODO validar se realmente é certo retornar aqui..

    if rows.nome != matricula['pessoa']['nome']:
        execucaoPrincipal.inserir_erro(tipo_erro="NOME", gerenciadorErros=gerenciadorErros, desktop=rows.nome, cloud=matricula['pessoa']['nome'])

    if rows.organograma != str(matricula['organograma']['id']):
        execucaoPrincipal.inserir_erro(tipo_erro="ORGANOGRAMA", gerenciadorErros=gerenciadorErros, desktop=rows.organograma, cloud=matricula['organograma']['id'])

    desktop_nivel = int(rows.nivelSalarial)
    cloud_nivel = safe_get(matricula, "nivelSalarial", "id") or 0
    if desktop_nivel != cloud_nivel:
        execucaoPrincipal.inserir_erro(tipo_erro="NIVEL_SALARIAL", gerenciadorErros=gerenciadorErros, desktop=desktop_nivel, cloud=cloud_nivel)

    desktop_vinculo = int(rows.vinculoEmpregaticio)
    cloud_vinculo = safe_get(matricula, "vinculoEmpregaticio", "id")
    if desktop_vinculo != cloud_vinculo:
        execucaoPrincipal.inserir_erro(tipo_erro="VINCULO_EMPREGATICIO", gerenciadorErros=gerenciadorErros, desktop=desktop_vinculo, cloud=cloud_vinculo)
    
    if rows.dataBase != matricula.get('dataBase') and matricula.get('tipo') != 'APOSENTADO':
        execucaoPrincipal.inserir_erro(tipo_erro="DATA_BASE", gerenciadorErros=gerenciadorErros, desktop=rows.dataBase, cloud=matricula['dataBase'])

    if rows.dataInicioContrato != matricula['dataInicioContrato']:
        execucaoPrincipal.inserir_erro(tipo_erro="DATA_INICIO_CONTRATO", gerenciadorErros=gerenciadorErros, desktop=rows.dataInicioContrato, cloud=matricula['dataInicioContrato'])


    ## INICIO VALIDAÇÃO PREVIDENCIAS
    # Definindo as condições de validação da previdência
    condicoes_previdencia = {   
        "ESTADUAL": rows.previdenciaEstadual == 'S',
        "FUNDO_ASSISTENCIA": rows.fundoAssistencia == 'S',
        "FUNDO_PREVIDENCIA": rows.fundoPrevidencia == 'S',
        "FUNDO_FINANCEIRO": rows.fundoFinanceiro == 'S'
    } 
    previdencia_federal = rows.previdenciaFederal == 'S'
    previdencia_federal_cloud = matricula.get("previdenciaFederal", False)
    erros_previdencias = False
    if previdencia_federal != previdencia_federal_cloud:
        desktop = f"FEDERAL: {previdencia_federal} |"
        cloud = f"FEDERAL: {previdencia_federal_cloud} |"
        erros_previdencias = True
    else:
        desktop = ""
        cloud = ""

    for key, value in condicoes_previdencia.items():
        # Encontrar o item correspondente em matricula['previdencias']
        
        previdencia_correspondente = next((p for p in matricula['previdencias'] if p['tipo'] == key), None)

        if previdencia_correspondente is not None:
            previdencia_correspondente = True
        else:
            previdencia_correspondente = False

        if value != previdencia_correspondente:
            # Comparar o valor (True/False) com o valor na matricula (True/False)
            desktop += f"{key}: {value} |"
            cloud += f"{key}: {previdencia_correspondente} |"
            erros_previdencias = True

    # Se houver erros, ajusta as strings finais e adiciona aos erros
    if erros_previdencias:
        desktop = desktop[:-2]
        cloud = cloud[:-2]
        execucaoPrincipal.inserir_erro(tipo_erro="TIPO_PREVIDENCIA", gerenciadorErros=gerenciadorErros, desktop=desktop, cloud=cloud)
    ## FIM VALIDAÇÃO PREVIDENCIAS

    
    if rows.cpf != pessoa['cpf']:
        execucaoPrincipal.inserir_erro(tipo_erro="CPF", gerenciadorErros=gerenciadorErros, desktop=rows.cpf, cloud=pessoa['cpf'])
    if pessoa['cpf'] is None or not pessoa['cpf']:
        execucaoPrincipal.inserir_erro(tipo_erro="MATRICULA_SEM_CPF", gerenciadorErros=gerenciadorErros, desktop=rows.cpf, cloud=pessoa['cpf'])
    
    if rows.dt_nascimento != pessoa['dataNascimento']:
        execucaoPrincipal.inserir_erro(tipo_erro="DATA_NASCIMENTO", gerenciadorErros=gerenciadorErros, desktop=rows.dt_nascimento, cloud=pessoa['dataNascimento'])

    if gerenciadorErros.remover_nao_digitos(rows.rg) != gerenciadorErros.remover_nao_digitos(pessoa['identidade']):
        execucaoPrincipal.inserir_erro(tipo_erro="RG", gerenciadorErros=gerenciadorErros, desktop=rows.rg, cloud=pessoa['identidade'])

    if rows.ctps != pessoa['ctps']:
        execucaoPrincipal.inserir_erro(tipo_erro="CTPS", gerenciadorErros=gerenciadorErros, desktop=rows.ctps, cloud=pessoa['ctps'])

    if rows.pis != pessoa['pis']:
        execucaoPrincipal.inserir_erro(tipo_erro="PIS", gerenciadorErros=gerenciadorErros, desktop=rows.pis, cloud=pessoa['pis'])
    
    sexo_pessoa_cloud = (pessoa.get('sexo') or [None])[0]
    if rows.sexo != sexo_pessoa_cloud:
        execucaoPrincipal.inserir_erro(tipo_erro="SEXO", gerenciadorErros=gerenciadorErros, desktop=rows.sexo, cloud=sexo_pessoa_cloud)

    if rows.orgao_emis_rg != pessoa.get('orgaoEmissorIdentidade'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="ORGAO_EMIS_RG",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.orgao_emis_rg,
            cloud=pessoa.get('orgaoEmissorIdentidade')
        )

    if rows.uf_emis_rg != pessoa.get('ufEmissaoIdentidade'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="UF_EMIS_RG",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.uf_emis_rg,
            cloud=pessoa.get('ufEmissaoIdentidade')
        )

    if rows.dt_emis_rg != pessoa.get('dataEmissaoIdentidade'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="DT_EMIS_RG",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.dt_emis_rg,
            cloud=pessoa.get('dataEmissaoIdentidade')
        )

    if rows.ric != pessoa.get('ric'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="RIC",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.ric,
            cloud=pessoa.get('ric')
        )

    if rows.dt_emissao_ric != pessoa.get('dataEmissaoRic'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="DT_EMISSAO_RIC",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.dt_emissao_ric,
            cloud=pessoa.get('dataEmissaoRic')
        )

    if rows.orgao_ric != pessoa.get('orgaoEmissorRic'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="ORGAO_RIC",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.orgao_ric,
            cloud=pessoa.get('orgaoEmissorRic')
        )

    if rows.serie_cart != pessoa.get('serieCtps'):
        execucaoPrincipal.inserir_erro(
            tipo_erro="SERIE_CART",
            gerenciadorErros=gerenciadorErros,
            desktop=rows.serie_cart,
            cloud=pessoa.get('serieCtps')
        )
    


    conta_bancaria = buscaMatricula.conta_bancaria
    # Dicionário para mapear os códigos de forma de pagamento para seus respectivos nomes
    pagamento_mapping = {"D": "DINHEIRO", "C": "CHEQUE", "R": "CREDITO_EM_CONTA"}
    if not conta_bancaria:
        conta_bancaria = {}
    if gerenciadorErros.remover_nao_digitos(rows.conta) != gerenciadorErros.remover_nao_digitos(conta_bancaria.get("conta")):
        execucaoPrincipal.inserir_erro(tipo_erro="CONTA_BANCARIA", gerenciadorErros=gerenciadorErros, desktop=rows.conta, cloud=conta_bancaria.get("conta"))
    else:
        if rows.conta is None:
            execucaoPrincipal.inserir_erro(tipo_erro="MATRICULA_SEM_CONTA_BANCARIA", gerenciadorErros=gerenciadorErros, desktop=rows.conta, cloud=conta_bancaria.get("conta"))

    if rows.tipo_conta != conta_bancaria.get("tipo"):
        execucaoPrincipal.inserir_erro(tipo_erro="TIPO_CONTA", gerenciadorErros=gerenciadorErros, desktop=rows.tipo_conta, cloud=conta_bancaria.get("tipo"))
    desk_forma_pagamento = pagamento_mapping.get(rows.formaPagamento, rows.formaPagamento)

    if desk_forma_pagamento != matricula['formaPagamento']:
        execucaoPrincipal.inserir_erro(tipo_erro="FORMA_PAGAMENTO", gerenciadorErros=gerenciadorErros, desktop=desk_forma_pagamento, cloud=matricula['formaPagamento'])

    return


def checar_discrepancias_evento(rows, buscaEvento, execucaoPrincipal):
    evento = buscaEvento.historico_evento

    descricao_evento = f"{evento['codigo']} - {evento['descricao']}"
    gerenciadorErros = GerenciadorErros(desk=rows.codigo, cloud=evento['codigo'], descricao=evento['id'])


    bool_map = {'true': True, 'false': False}

    if rows.incidenciaPrevidenciaSocial != evento['incidenciaPrevidenciaSocial']:
        execucaoPrincipal.inserir_erro(tipo_erro="INCIDENCIA_PREVIDENCIA_SOCIAL", gerenciadorErros=gerenciadorErros, desktop=rows.incidenciaPrevidenciaSocial, cloud=evento['incidenciaPrevidenciaSocial'])
    if rows.incidenciaIrrf != evento['incidenciaIrrf']:
        execucaoPrincipal.inserir_erro(tipo_erro="INCIDENCIA_IRRF", gerenciadorErros=gerenciadorErros, desktop=rows.incidenciaIrrf, cloud=evento['incidenciaIrrf'])
    if rows.incidenciaFgts != evento['incidenciaFgts']:
        execucaoPrincipal.inserir_erro(tipo_erro="INCIDENCIA_FGTS", gerenciadorErros=gerenciadorErros, desktop=rows.incidenciaFgts, cloud=evento['incidenciaFgts'])
    if rows.incidenciaContribuicaoSindicalLaboral != evento['incidenciaContribuicaoSindicalLaboral']:
        execucaoPrincipal.inserir_erro(tipo_erro="INCIDENCIA_CONTRIBUICAO_SINDICAL_LABORAL", gerenciadorErros=gerenciadorErros, desktop=rows.incidenciaContribuicaoSindicalLaboral, cloud=evento['incidenciaContribuicaoSindicalLaboral'])
    if rows.incidenciaRpps != evento['incidenciaRpps']:
        execucaoPrincipal.inserir_erro(tipo_erro="INCIDENCIA_RPPS", gerenciadorErros=gerenciadorErros, desktop=rows.incidenciaRpps, cloud=evento['incidenciaRpps'])
    if bool_map.get(rows.enviaEsocial, False) != evento['enviaEsocial']:
        execucaoPrincipal.inserir_erro(tipo_erro="ENVIA_ESOCIAL", gerenciadorErros=gerenciadorErros, desktop=rows.enviaEsocial, cloud=evento['enviaEsocial'])
    if rows.codigoEsocial != evento['codigoEsocial']:
        execucaoPrincipal.inserir_erro(tipo_erro="CODIGO_ESOCIAL", gerenciadorErros=gerenciadorErros, desktop=rows.codigoEsocial, cloud=evento['codigoEsocial'])
    if rows.naturezaRubrica != evento["naturezaRubrica"]:
        execucaoPrincipal.inserir_erro(tipo_erro="NATUREZA_RUBRICA", gerenciadorErros=gerenciadorErros, desktop=rows.naturezaRubrica, cloud=evento['naturezaRubrica'])
    if rows.codigoRubrica != evento["codigoRubrica"]:
        execucaoPrincipal.inserir_erro(tipo_erro="CODIGO_RUBRICA", gerenciadorErros=gerenciadorErros, desktop=rows.codigoRubrica, cloud=evento['codigoRubrica'])
    if rows.classificacao_evento != evento["classificacao"]:
        execucaoPrincipal.inserir_erro(tipo_erro="CLASSIFICACAO_EVENTO", gerenciadorErros=gerenciadorErros, desktop=rows.classificacao_evento, cloud=evento['classificacao'])
    if bool_map.get(rows.enviaTransparencia, False) != evento["enviaTransparencia"]:
        execucaoPrincipal.inserir_erro(tipo_erro="ENVIA_TRANSPARENCIA", gerenciadorErros=gerenciadorErros, desktop=bool_map.get(rows.enviaTransparencia, False), cloud=evento["enviaTransparencia"])
    if bool_map.get(rows.enviaRais, False) != evento["enviaRais"]:
        execucaoPrincipal.inserir_erro(tipo_erro="ENVIA_RAIS", gerenciadorErros=gerenciadorErros, desktop=rows.bool_map.get(rows.enviaRais, False), cloud=evento["enviaRais"])
    if bool_map.get(rows.tetoRemuneratorio, False) != evento["tetoRemuneratorio"]:
        execucaoPrincipal.inserir_erro(tipo_erro="TETO_REMUNERATORIO", gerenciadorErros=gerenciadorErros, desktop=bool_map.get(rows.tetoRemuneratorio, False), cloud=evento["tetoRemuneratorio"])
    if rows.tabelarubrica != evento["tabelaRubricas"]:
        execucaoPrincipal.inserir_erro(tipo_erro="TABELA_RUBRICAS", gerenciadorErros=gerenciadorErros, desktop=rows.tabelarubrica, cloud=evento["tabelaRubricas"])
    
    return


def checar_discrepancias_endereco(desktop_data, cloud_data, execucaoPrincipal):
    esquerda = desktop_data
    direita = cloud_data
    gerenciadorErros = GerenciadorErros(desk=execucaoPrincipal.i_pessoas, cloud=execucaoPrincipal.nome, descricao=execucaoPrincipal.id)

    # Convertendo os tipos de dados das colunas de chave e analisados para string
    esquerda.fillna('', inplace=True)
    direita.fillna('', inplace=True)
    tipar_df(esquerda, direita, 'logradouro.id', str)
    tipar_df(esquerda, direita, 'bairro.id', str)
    tipar_df(esquerda, direita, 'complemento', str)
    tipar_df(esquerda, direita, 'numero', str)
    tipar_df(esquerda, direita, 'cep', str)

    # Realizando a análise
    # Registros do desk que não foram para o cloud
    nao_encontrados = pd.merge(esquerda, direita, on=['logradouro.id', 'bairro.id'], how='outer', indicator=True)

    nao_migrados = nao_encontrados[nao_encontrados['_merge'] == 'left_only'].drop('_merge', axis=1)
    if not nao_migrados.empty:
        for index, row in nao_migrados.iterrows():
            gerenciadorErros.descricao = f"idLogradouro:{row['logradouro.id']}"
            desktop_data = row.filter(like='_x').rename(lambda x: x.rstrip('_x')).to_dict()
            diff_desktop = {key: desktop_data[key] for key in desktop_data}
            execucaoPrincipal.inserir_erro(tipo_erro="PESSOA_ENDERECO_NAO_ENCONTRADO", gerenciadorErros=gerenciadorErros, desktop=diff_desktop, cloud="")

    migrados_a_mais = nao_encontrados[nao_encontrados['_merge'] == 'right_only'].drop('_merge', axis=1)
    if not migrados_a_mais.empty:
        for index, row in nao_migrados.iterrows():
            gerenciadorErros.descricao = f"idLogradouro:{row['logradouro.id']}"
            cloud_data = row.filter(like='_y').rename(lambda x: x.rstrip('_y')).to_dict()
            diff_cloud = {key: cloud_data[key] for key in cloud_data}
            execucaoPrincipal.inserir_erro(tipo_erro="PESSOA_ENDERECO_A_MAIS", gerenciadorErros=gerenciadorErros, desktop="", cloud=diff_cloud)


    # Verificar se existe algum do desk que foi para o cloud com dados inválidos
    migrados_com_dados_invalidos = pd.merge(esquerda, direita, on=['logradouro.id', 'bairro.id'], how='inner')
    migrados_com_dados_invalidos = migrados_com_dados_invalidos[
        (migrados_com_dados_invalidos['complemento_x'] != migrados_com_dados_invalidos['complemento_y']) |
        (migrados_com_dados_invalidos['numero_x'] != migrados_com_dados_invalidos['numero_y']) |
        (migrados_com_dados_invalidos['cep_x'] != migrados_com_dados_invalidos['cep_y'])
        ]

    if not migrados_com_dados_invalidos.empty:
        for index, row in migrados_com_dados_invalidos.iterrows():
            gerenciadorErros.descricao = row.id

            desktop_data = row.filter(like='_x').rename(lambda x: x.rstrip('_x')).to_dict()
            cloud_data = row.filter(like='_y').rename(lambda x: x.rstrip('_y')).to_dict()

            diff_desktop = {key: desktop_data[key] for key in desktop_data if desktop_data[key] != cloud_data.get(key)}
            diff_cloud = {key: cloud_data[key] for key in cloud_data if cloud_data[key] != desktop_data.get(key)}

            erros = {
                'desktop': ', '.join(f'{k}: {v}' for k, v in diff_desktop.items()),
                'cloud': ', '.join(f'{k}: {v}' for k, v in diff_cloud.items())
            }

            execucaoPrincipal.inserir_erro(tipo_erro="PESSOA_ENDERECO_INCORRETO", gerenciadorErros=gerenciadorErros, desktop=erros.get('desktop'), cloud=erros.get('cloud'))
    return


def checar_discrepancias_cargo(rows, buscaCargo, execucaoPrincipal):
    gerenciadorErros = GerenciadorErros(desk=rows.codigo_cargo, cloud=rows.id_cargo, descricao=buscaCargo.cargo.get("descricao", ""))

    if rows.codigo_tce != buscaCargo.codigo_tce:
        execucaoPrincipal.inserir_erro(tipo_erro="CODIGO_TCE", gerenciadorErros=gerenciadorErros, desktop=rows.codigo_tce, cloud=buscaCargo.codigo_tce)
    if rows.data_a_vigorar != buscaCargo.data_a_vigorar:
        execucaoPrincipal.inserir_erro(tipo_erro="DATA_A_VIGORAR", gerenciadorErros=gerenciadorErros, desktop=rows.data_a_vigorar, cloud=buscaCargo.data_a_vigorar)
    return

def checar_discrepancias_dependentes(desktop_data, cloud_data, execucaoPrincipal):
    esquerda = desktop_data
    direita = cloud_data
    gerenciadorErros = GerenciadorErros(desk=execucaoPrincipal.matriculas, cloud=execucaoPrincipal.id_pessoa_responsavel_cloud, descricao="SERA_INSERIDA_NO_DF")

    # Convertendo os tipos de dados das colunas de chave e analisados para string
    #esquerda.fillna('', inplace=True)
    #direita.fillna('', inplace=True)
    tipar_df(esquerda, direita, 'id_pessoa', str)
    tipar_df(esquerda, direita, 'id_dependente', str)
    tipar_df(esquerda, direita, 'data_nascimento', str)
    tipar_df(esquerda, direita, 'nome_dependente', str)
    tipar_df(esquerda, direita, 'grau', str)
    tipar_df(esquerda, direita, 'irrf', str)
    tipar_df(esquerda, direita, 'salario_familia', str)
    # Realizando a análise
    # Registros do desk que não foram para o cloud
    analise_merge = pd.merge(esquerda, direita, on=['id_pessoa', 'id_dependente'], how='outer', indicator=True, suffixes=('_desk', '_cloud'))
    nao_migrados = analise_merge[analise_merge['_merge'] == 'left_only'].drop('_merge', axis=1)
    if not nao_migrados.empty:
        for index, row in nao_migrados.iterrows():
            gerenciadorErros.descricao = ""
            desktop_data = row.to_dict()
            desktop_data = "; \n".join([f"{key}:{value}" for key, value in desktop_data.items() if '_desk' in key])
            gerenciadorErros.descricao = row.nome_dependente_desk
            execucaoPrincipal.inserir_erro(tipo_erro="DEPENDENTE_NAO_ENCONTRADO_NO_CLOUD", gerenciadorErros=gerenciadorErros, desktop=desktop_data, cloud="")

    # Registros que foram a mais pro cloud
    migrados_extra = analise_merge[analise_merge['_merge'] == 'right_only'].drop('_merge', axis=1)
    if not migrados_extra.empty:
        for index, row in migrados_extra.iterrows():
            gerenciadorErros.descricao = ""
            cloud_data = row.to_dict()
            cloud_data = "; \n".join([f"{key}:{value}" for key, value in cloud_data.items() if '_cloud' in key])
            gerenciadorErros.descricao = row.nome_dependente_cloud
            execucaoPrincipal.inserir_erro(tipo_erro="DEPENDENTE_A_MAIS_NO_CLOUD", gerenciadorErros=gerenciadorErros, desktop="", cloud=cloud_data)

    # Verificar se existe algum do desk que foi para o cloud com dados inválidos
    migrados_com_dados_invalidos = pd.merge(esquerda, direita, on=['id_pessoa', 'id_dependente'], how='inner', suffixes=('_desk', '_cloud'))
    migrados_com_dados_invalidos = migrados_com_dados_invalidos[
        (migrados_com_dados_invalidos['data_nascimento_desk'] != migrados_com_dados_invalidos['data_nascimento_cloud']) |
        (migrados_com_dados_invalidos['nome_dependente_desk'] != migrados_com_dados_invalidos['nome_dependente_cloud']) |
        (migrados_com_dados_invalidos['grau_desk'] != migrados_com_dados_invalidos['grau_cloud']) |
        (migrados_com_dados_invalidos['data_inicio_desk'] != migrados_com_dados_invalidos['data_inicio_cloud']) |
        (migrados_com_dados_invalidos['irrf_desk'] != migrados_com_dados_invalidos['irrf_cloud']) |
        (migrados_com_dados_invalidos['salario_familia_desk'] != migrados_com_dados_invalidos['salario_familia_cloud'])
    ]

    if not migrados_com_dados_invalidos.empty:
        for index, row in migrados_com_dados_invalidos.iterrows():
            desktop_data_dicionario = row.filter(like='_desk').rename(lambda x: x.rstrip('_desk')).to_dict()
            cloud_data_dicionario = row.filter(like='_cloud').rename(lambda x: x.rstrip('_cloud')).to_dict()
            #print(desktop_data_dicionario)
            #print(cloud_data_dicionario)
            diff_desktop = {key: desktop_data_dicionario[key] for key in desktop_data_dicionario if desktop_data_dicionario[key] != cloud_data_dicionario.get(key)}
            diff_cloud = {key: cloud_data_dicionario[key] for key in cloud_data_dicionario if cloud_data_dicionario[key] != desktop_data_dicionario.get(key)}

            erros = {
                'desktop': ', '.join(f'{k}: {v}' for k, v in diff_desktop.items()),
                'cloud': ', '.join(f'{k}: {v}' for k, v in diff_cloud.items())
            }
            gerenciadorErros.descricao = row.nome_dependente_desk
            execucaoPrincipal.inserir_erro(tipo_erro="PESSOA_DEPENDENTE_DADO_INCORRETO", gerenciadorErros=gerenciadorErros, desktop=erros.get('desktop'), cloud=erros.get('cloud'))
    return
