def sql_matriculas(execucaoPrincipal):
    """Funcao que traz o SQL de matrículas"""

    sql = f""" 
            SELECT
                300 as sistema,
                'matricula' as tipo_registro,
                TRIM(p2.nome) as nome,
                TRIM(h.i_funcionarios) as matricula,
                TRIM(h.i_pessoas) as i_pessoas,
                TRIM(pc.i_bancos) as i_bancos,
                TRIM(pc.num_conta) as conta,
                TRIM(pf.cpf) as cpf,
                TRIM(id_gerado) as id,
                TRIM(pf.carteira_prof) as ctps,
                TRIM(pf.rg) as rg,
                TRIM(pf.num_pis) as pis,
                TRIM(pf.dt_nascimento) as dt_nascimento,
                TRIM(pf.sexo) as sexo,
                TRIM(forma_pagto) as formaPagamento,
                pf.orgao_emis_rg as orgao_emis_rg,
                (SELECT sigla FROM bethadba.estados where i_estados = pf.uf_emis_rg ) as uf_emis_rg,
                CAST(pf.dt_emis_rg AS VARCHAR(255)) as dt_emis_rg,
                pf.ric as ric,
                CAST(pf.dt_emissao_ric AS VARCHAR(255)) as dt_emissao_ric,
                pf.orgao_ric as orgao_ric,
                pf.serie_cart as serie_cart,
                dependentes = ISNULL(
                				(select COUNT(i_dependentes) 
                				from bethadba.dependentes_func df
                				where df.i_funcionarios = h.i_funcionarios 
                				and df.i_entidades = h.i_entidades
                				and df.dep_irrf = 'S'
                				group by i_funcionarios, i_entidades),
                				0),
                h.prev_federal as previdenciaFederal,
                h.prev_estadual as previdenciaEstadual,
                h.fundo_ass as fundoAssistencia,
                h.fundo_prev as fundoPrevidencia,
                h.fundo_financ as fundoFinanceiro,
                codNivel = (select hs.i_niveis from bethadba.hist_salariais hs 
								where h.i_entidades = hs.i_entidades 
								and h.i_funcionarios = hs.i_funcionarios
								and hs.dt_alteracoes = (select MAX(hs2.dt_alteracoes) from bethadba.hist_salariais hs2
														where hs2.i_entidades = hs.i_entidades and hs2.i_funcionarios = hs.i_funcionarios
														)
									),
                planoSalarial = (select i_planos_salariais from bethadba.niveis nv where nv.i_entidades = h.i_entidades and nv.i_niveis = codNivel ),
                nivelSalarial = ISNULL(bethadba.dbf_get_id_gerado(sistema, 'nivel-salarial', h.i_entidades, planoSalarial , codNivel), 0),
                (select i_chave_dsk3 
		                from bethadba.controle_migracao_registro cmr2
		                where cmr2.sistema = cmr.sistema
		                and cmr2.tipo_registro = cmr.tipo_registro 
		                and cmr2.i_chave_dsk1 = h.i_entidades
		                and cmr2.i_chave_dsk2 = h.i_funcionarios
		                and i_chave_dsk3 is not NULL) as tipo_matricula,
                case 
	                when ISNULL(tipo_matricula,'FUNCIONARIO') = ISNULL(i_chave_dsk3,'FUNCIONARIO') then 1
	                else 0
	                end as analisar,
                case
                            when tipo_conta = 1 then 'CORRENTE'
                            when tipo_conta = 2 then 'POUPANCA'
                            when tipo_conta = 3 then 'SALARIO'
                            when tipo_conta = 4 then 'ELETRONICA'
                            when tipo_conta = 5 then 'CHEQUE'
                            when tipo_conta = 6 then 'CORRENTE E POUPANÇA'
                            else 'OUTROS'
                        end as tipo_conta,
                configuracaoOrganograma = bethadba.dbf_get_id_gerado(sistema, 'configuracao-organograma', h.i_config_organ),
                organograma = isnull(bethadba.dbf_get_id_gerado(sistema, 'organograma', configuracaoOrganograma , h.i_organogramas ),''),
                f.tipo_func as tipo_func,
                f.conselheiro_tutelar as conselheiro_tutelar,
				vinculoEmpregaticio = isnull(bethadba.dbf_get_id_gerado(sistema, 'vinculo-empregaticio', h.i_vinculos),''),
				CAST(f.dt_admissao AS VARCHAR(255)) as dataInicioContrato,
				CAST(f.dt_base AS VARCHAR(255)) as 'dataBase',
                bethadba.dbf_getsituacao(1, h.i_entidades, matricula, GETDATE()) as situacao
            FROM bethadba.hist_funcionarios h
            JOIN bethadba.funcionarios f on (h.i_funcionarios = f.i_funcionarios and h.i_entidades = f.i_entidades)
            JOIN bethadba.pessoas_contas pc on (h.i_pessoas = pc.i_pessoas and h.i_pessoas_contas = pc.i_pessoas_contas)
            JOIN bethadba.pessoas_fisicas pf on (h.i_pessoas = pf.i_pessoas)
            JOIN bethadba.pessoas p2 on (p2.i_pessoas = h.i_pessoas)
            JOIN bethadba.controle_migracao_registro cmr on (cmr.i_chave_dsk2 = h.i_funcionarios and cmr.i_chave_dsk1 = h.i_entidades)
            WHERE h.dt_alteracoes = (select MAX(hf2.dt_alteracoes) from bethadba.hist_funcionarios hf2 where hf2.i_funcionarios = h.i_funcionarios and hf2.i_entidades = h.i_entidades)
            AND cmr.tipo_registro = tipo_registro
            AND cmr.sistema = sistema
            AND situacao not in (7)
            AND h.i_entidades in ({execucaoPrincipal.entidades})
            AND analisar = 1
            //and matricula = 10009 //Para testar alguma matricula desk
            //and h.i_pessoas = 451 //Para testar alguma pessoa desk
            ORDER BY tipo_matricula, matricula ASC;
    """
    return sql
    #TODO Validar também as rescisões que aconteceram após essa data, e as admissões que aconteceram após essa data.. Enfim, pra pegar todos, pode ter BO no dbf_getsituacao
