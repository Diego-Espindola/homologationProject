# Consultas HTTPS e organização de JSON

import json
import copy
import traceback
import requests
from Gerenciador_erros import safe_get


class BuscaMatricula:
    def __init__(self, token, id_matricula):
        self.token = token
        self.id_matricula = id_matricula
        self.historico_matricula = {}
        self.busca_matricula()
        self.historico_pessoa = {}
        self.conta_bancaria = None

    def busca_matricula(self):
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/historico-matricula/{self.id_matricula}"
        consulta = busca_geral(url,token_=self.token)
        self.historico_matricula = consulta

    def busca_pessoa(self):
        id_pessoa = self.historico_matricula['pessoa']['id']
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/historico-pessoa/{id_pessoa}"
        self.historico_pessoa = busca_geral(url, token_=self.token)
    
    def encontrar_conta_by_id(self):
        contas_data = self.historico_pessoa['contasBancarias']
        # Busca a conta bancária selecionada na matrícula
        if self.historico_matricula['contaBancariaPagamento']:        
            conta_id = self.historico_matricula['contaBancariaPagamento']['id']
            for conta in contas_data:
                if conta["id"] == conta_id:
                    self.conta_bancaria = {
                        "conta":str(conta["numero"])+str(conta["digito"]),
                        "tipo":conta["tipo"]
                        }


class BuscaEvento:
    def __init__(self, token, id_evento):
        self.token = token
        self.id_evento = id_evento
        self.historico_evento = {}
        self.busca_evento()

    def busca_evento(self):
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/historico-configuracao-evento/{self.id_evento}"
        consulta = busca_geral(url,token_=self.token)
        self.historico_evento = consulta


class BuscaCargo:
    def __init__(self, token):
        self.token = token
        self.campos_adicionais_cargo_geral = busca_campo_adicional(descricao="Cargo", token=self.token) # Dicionário com os campos
        self.cargo = {}
        self.ato = {}
        self.codigo_tce = None
        self.data_a_vigorar = None

    def busca_cargo(self, id_cargo):
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/cargo/{id_cargo}"
        consulta = busca_geral(url,token_=self.token)
        self.cargo = consulta
    
    def busca_ato(self, id_ato):
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/ato/{id_ato}"
        consulta = busca_geral(url,token_=self.token)
        self.ato = consulta


def busca_geral(url, token_, headers=None):
    if not headers:
        headers = {'Authorization': f'Bearer {token_}', 'Content-Type': 'application/json'}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  

        try:
            response_json = response.json()
        except requests.exceptions.JSONDecodeError as e:
            print(f"Erro ao decodificar JSON: {e}")
            print(f"Conteúdo da resposta: {response.text}")
            raise
        
        if response_json.get('code') == 401:
            print(token_)
            raise ValueError('Token inválido')
        elif 'message' in response_json:
            raise ValueError(response_json['message'])
        else:
            return response_json
    
    except requests.exceptions.RequestException as e:
        # Exceções de requisições HTTP
        print(f"Erro de requisição HTTP: {e}")
        #traceback.print_exc()
        raise
    except Exception as e:
        # Outras exceções
        print(f"Erro ao processar evento: {e}")
        #traceback.print_exc()
        raise


def busca_campo_adicional(descricao, token):
    offset = 0
    limit = 100               
    page = 0
    hasNext = True
    id_campo_adicional = None
    while hasNext:
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/campo-adicional?offset={offset}&limit={limit}"
        consulta = busca_geral(url,token)
        hasNext = consulta['hasNext']
        campo_encontrado = next((campo_adicional for campo_adicional in consulta["content"] if campo_adicional["descricao"] == descricao), None)
        if campo_encontrado is not None:
            id_campo_adicional = campo_encontrado.get("id")
        page += 1
        offset = page*limit

    if id_campo_adicional is None:
        raise ValueError('Não foi encontrado o campo adicional dos Cargos')
    
    url = f"https://pessoal.betha.cloud/service-layer/v1/api/campo-adicional/{id_campo_adicional}"
    consulta = busca_geral(url,token)
    campos_adicionais_retorno = {campo["variavel"]:campo["id"] for campo in consulta["agrupador"]["campos"]}

    return campos_adicionais_retorno


def buscar_matriculas(id_matricula, token_):
    buscaMatricula = BuscaMatricula(id_matricula=id_matricula, token=token_)
    
    buscaMatricula.busca_pessoa()
    buscaMatricula.encontrar_conta_by_id()

    return buscaMatricula


def buscar_eventos(id_evento, token_):
    buscaEvento = BuscaEvento(id_evento=id_evento, token=token_)
    return buscaEvento


def buscar_cargos(id_cargo, token):
    buscaCargo = BuscaCargo(token=token)
    buscaCargo.busca_cargo(id_cargo)
    # Para pegar a Data a Vigorar do ato, pega do Histórico mais antigo
    if buscaCargo.cargo["historicos"]:
        historicos_ordenados = copy.deepcopy(buscaCargo.cargo["historicos"])
        historicos_ordenados = sorted(buscaCargo.cargo["historicos"], key=lambda historico: historico["inicioVigencia"])
        for historico in historicos_ordenados:
            if historico["ato"] is not None:
                buscaCargo.busca_ato(historico["ato"]["id"])
                if buscaCargo.ato["dataVigorar"] is not None:
                    buscaCargo.data_a_vigorar = buscaCargo.ato["dataVigorar"]
                    break;
    else:
        buscaCargo.ato = buscaCargo.cargo["ato"]
        if buscaCargo.ato is not None:
            buscaCargo.busca_ato(buscaCargo.ato["id"])
            if buscaCargo.ato["dataVigorar"] is not None:
                buscaCargo.data_a_vigorar = buscaCargo.ato["dataVigorar"]
    # Para pegar o código do TCE
    hash_codigo_tce = buscaCargo.campos_adicionais_cargo_geral.get("codigo_tce") or "0"
    campos_adicionais = []
    for campo in buscaCargo.cargo["camposAdicionais"]:
        campos_adicionais.extend(campo["campos"])
    buscaCargo.codigo_tce = next((campo["valor"] for campo in campos_adicionais if campo["id"] == hash_codigo_tce), None)
    return buscaCargo


def buscar_dependentes(pessoas_fisicas_encontradas, token):
    # no sql buscar pelo id da matricula
    offset = 0
    limit = 100
    page = 0
    hasNext = True
    dicionario_dependentes_func = {}
    while hasNext:
        url = f"https://pessoal.betha.cloud/service-layer/v1/api/dependencia/?offset={offset}&limit={limit}"
        consulta = busca_geral(url,token)
        hasNext = consulta['hasNext']
        for dependente in consulta["content"]:
            id_pessoa_resp = safe_get(dependente, "pessoa", "id")
            if id_pessoa_resp not in pessoas_fisicas_encontradas:
                continue  # vai para o próximo loop for
            url = f"https://pessoal.betha.cloud/service-layer/v1/api/historico-pessoa/{dependente['pessoaDependente']['id']}"
            dependente["pessoaDependente"] = busca_geral(url, token_=token)
            dependente_reduzido = {
                "id_pessoa":id_pessoa_resp,
                "id_dependente":safe_get(dependente, "pessoaDependente", "id"),
                "nome_dependente":safe_get(dependente, "pessoaDependente", "nome") or "",
                "data_nascimento":safe_get(dependente, "pessoaDependente", "dataNascimento"),
                "grau":dependente.get("grau", "OUTROS"),
                "data_inicio":dependente.get("dataInicio"),
                "irrf":dependente.get("irrf", False),
                "salario_familia":dependente.get("salarioFamilia", False)
            }
            if dicionario_dependentes_func.get(id_pessoa_resp):
                dicionario_dependentes_func[id_pessoa_resp].append(dependente_reduzido)
            else:
                dicionario_dependentes_func[id_pessoa_resp] = [dependente_reduzido]
        page += 1
        offset = page*limit

    return dicionario_dependentes_func
