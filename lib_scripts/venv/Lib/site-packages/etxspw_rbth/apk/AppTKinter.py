import tkinter as tk
import time
import re
import smtplib
import os
from tkinter import ttk
from tkinter import messagebox
from ttkbootstrap.constants import *
from ttkbootstrap.style import Style
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

print("email",os.environ.get('EMAIL'))

TITLE_FONTE = ('Arial', 14, 'bold')
FONTE = ('Arial', 12)
TAMANHO_BARRA_PROGRESSO = 300
TEMA_STYLE = "solar"
STYLE_LABEL_STATUS = "Info.TLabel"

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("BETHA SISTEMAS")
        self.geometry("600x300")
        Style(theme=TEMA_STYLE)

        self.frame_atual = ttk.Frame(self)
        self.frame_atual.pack(expand=True, fill='both', padx=20, pady=10)

        self.notificacao = tk.Toplevel(self)
        self.notificacao.withdraw()

        self.iniciar_homologacao = False #Para a main não iniciar até o momento que estiver pronta a tela de homologação
        self.terminou_homologacao = False
        self.mostrar_config_frame()

    def mostrar_config_frame(self):
        # Labels e Entradas
        ttk.Label(self.frame_atual, text="Parametrização do Sistema", font=TITLE_FONTE).grid(row=0, column=0, columnspan=2, pady=20)

        ttk.Label(self.frame_atual, text="Insira o odbc:").grid(row=1, column=0, padx=10, pady=(10, 5), sticky='w')
        self.entry_odbc = ttk.Entry(self.frame_atual, width=40)
        self.entry_odbc.grid(row=2, column=0, padx=10, pady=5, sticky='w')

        ttk.Label(self.frame_atual, text="Digite a(s) Entidade(s) (separar por vírgula):").grid(row=1, column=1, padx=10, pady=(10, 5), sticky='w')
        self.entry_entidade = ttk.Entry(self.frame_atual, width=40)
        self.entry_entidade.grid(row=2, column=1, padx=10, pady=5, sticky='w')

        ttk.Label(self.frame_atual, text="Insira o token:").grid(row=3, column=0, padx=10, pady=(10, 5), sticky='w')
        self.entry_token = ttk.Entry(self.frame_atual, width=40)
        self.entry_token.grid(row=4, column=0, padx=10, pady=5, sticky='w')

        ttk.Label(self.frame_atual, text="Digite seu email:").grid(row=3, column=1, padx=10, pady=(20, 5), sticky='w')
        self.entry_email = ttk.Entry(self.frame_atual, width=40)
        self.entry_email.grid(row=4, column=1, padx=10, pady=5, sticky='w')

        # Botão Enviar
        btn_enviar = ttk.Button(self.frame_atual, text="Enviar", command=self.enviar_para_homologacao, width=15)
        btn_enviar.grid(row=5, column=0, columnspan=2, pady=10, sticky='n')
        
        self.frame_atual.grid_columnconfigure(0, weight=1)
        self.frame_atual.grid_rowconfigure(1, weight=1)
        self.frame_atual.grid_rowconfigure(7, weight=1)  # Ajustado para nova linha

    def mostrar_homolog_frame(self):
        if self.frame_atual:
            self.frame_atual.destroy()
        self.frame_atual = ttk.Frame(self)
        self.frame_atual.pack(fill='both', expand=True, padx=20, pady=10)
        self.geometry("800x400")

        ttk.Label(self.frame_atual, text="Homologação Betha X Betha", font=TITLE_FONTE).grid(row=0, column=0, columnspan=2, pady=20, sticky='n')

        # Configura a largura das colunas para expandir e alinhar o conteúdo
        self.frame_atual.grid_columnconfigure(0, weight=1)
        self.frame_atual.grid_columnconfigure(1, weight=1)

        # Label matrícula
        self.label_matriculas = ttk.Label(self.frame_atual, text="Validação Matrículas")
        self.label_matriculas.grid(row=1, column=0, pady=10)
        
        self.label_status_matriculas = ttk.Label(self.frame_atual, text="", style=STYLE_LABEL_STATUS)
        self.label_status_matriculas.grid(row=2, column=0, columnspan='1')

        self.progress_bar_matriculas = ttk.Progressbar(self.frame_atual, orient="horizontal", length=TAMANHO_BARRA_PROGRESSO, mode="determinate")
        self.progress_bar_matriculas.grid(row=3, column=0, padx=50, pady=10)

        # Label evento
        self.label_eventos = ttk.Label(self.frame_atual, text="Validação Eventos")
        self.label_eventos.grid(row=4, column=0, pady=10)

        self.label_status_eventos = ttk.Label(self.frame_atual, text="", style=STYLE_LABEL_STATUS)
        self.label_status_eventos.grid(row=5, column=0, columnspan='1')

        self.progress_bar_eventos = ttk.Progressbar(self.frame_atual, orient="horizontal", length=TAMANHO_BARRA_PROGRESSO, mode="determinate")
        self.progress_bar_eventos.grid(row=6, column=0, padx=50, pady=10)

        # Label cargo
        self.label_cargos = ttk.Label(self.frame_atual, text="Validação Cargos TCE")
        self.label_cargos.grid(row=7, column=0, pady=10)

        self.label_status_cargos = ttk.Label(self.frame_atual, text="", style=STYLE_LABEL_STATUS)
        self.label_status_cargos.grid(row=8, column=0, columnspan='1')

        self.progress_bar_cargos = ttk.Progressbar(self.frame_atual, orient="horizontal", length=TAMANHO_BARRA_PROGRESSO, mode="determinate")
        self.progress_bar_cargos.grid(row=9, column=0, padx=50, pady=10)

        # Enderecos
        self.label_enderecos = ttk.Label(self.frame_atual, text="Validação Endereços")
        self.label_enderecos.grid(row=1, column=1, pady=10)

        self.label_status_enderecos = ttk.Label(self.frame_atual, text="Aguardando processamento de matrículas", style=STYLE_LABEL_STATUS)
        self.label_status_enderecos.grid(row=2, column=1, columnspan='1')

        self.progress_bar_enderecos = ttk.Progressbar(self.frame_atual, orient="horizontal", length=TAMANHO_BARRA_PROGRESSO, mode="determinate")
        self.progress_bar_enderecos.grid(row=3, column=1, padx=50, pady=10)
        
        # Dependentes
        self.label_dependentes = ttk.Label(self.frame_atual, text="Validação Dependentes")
        self.label_dependentes.grid(row=4, column=1, pady=10)

        self.label_status_dependentes = ttk.Label(self.frame_atual, text="Aguardando processamento de matrículas", style=STYLE_LABEL_STATUS)
        self.label_status_dependentes.grid(row=5, column=1, columnspan='1')

        self.progress_bar_dependentes = ttk.Progressbar(self.frame_atual, orient="horizontal", length=TAMANHO_BARRA_PROGRESSO, mode="determinate")
        self.progress_bar_dependentes.grid(row=6, column=1, padx=50, pady=10)

        self.iniciar_homologacao = True

    def validar_token(self):
        # Aqui você pode adicionar uma lógica real de validação do token
        return len(self.token) > 0

    def validar_email(self):
        padrao = r'^[a-zA-Z0-9_.+-]+@betha\.com\.br$'
        return True if re.match(padrao, self.email) else False

    def enviar_para_homologacao(self):
        self.token = self.entry_token.get()
        self.odbc = self.entry_odbc.get()
        self.entidades = self.entry_entidade.get()
        self.email = self.entry_email.get()
        self.dicionario_retorno_dataframe = {}

        if not self.validar_token():
            messagebox.showerror("Erro", "token inválido. Verifique e tente novamente.")
            return

        if not self.odbc:
            messagebox.showerror("Erro", "odbc não pode estar vazio.")
            return

        if not self.entidades:
            messagebox.showerror("Erro", "Entidade não pode estar vazia.")
            return

        if not self.validar_email():
            messagebox.showerror("Erro", "Email inválido! O email não será enviado")
            return

        tempo_notificacao = 1000
        self.mostrar_notificacao("Encaminhado para homologação com sucesso!", tempo_notificacao)

        self.mostrar_homolog_frame()

    def mostrar_notificacao(self, message, duration=3000):
        self.notificacao.title("Encaminhando")

        self.notificacao.wm_attributes("-topmost", True)

        # Adiciona um Label com a mensagem
        label = tk.Label(self.notificacao, text=message, font=("Arial", 14), bg="white", fg="black")
        label.pack(fill='both')

        window_width = self.winfo_width()
        window_height = self.winfo_height()
        window_x = self.winfo_x()
        window_y = self.winfo_y()

        self.notificacao.geometry(f"{window_width}x{window_height}+{window_x}+{window_y}")

        # Exibir janela
        self.notificacao.deiconify()

        # Fechar a janela após a duração especificada
        self.notificacao.after(duration, self.notificacao.destroy)

    def verificar_threads_envio_email(self, thread):
        if thread.is_alive() or not self.iniciar_homologacao:
            self.after(1000, self.verificar_threads_envio_email, thread)
        else:
            # A thread principal iniciou e terminou
            print('enviando')
            self.enviar_resultado()

    def enviar_resultado(self):
        email_destino = self.email

        servidor_smtp = 'mailserver.bethacloud.com.br'
        porta_smtp = 587
        email_remetente = os.environ.get('EMAIL')
        senha_remetente = os.environ.get('EMAIL_PASSWD')  # Usar a senha da variável de ambiente

        mensagem = MIMEMultipart()
        mensagem['From'] = email_remetente
        mensagem['To'] = email_destino
        mensagem['Subject'] = 'Resultados encontrados : ' + self.odbc

        for nome_arquivo, buffer_xlsx in self.dicionario_retorno_dataframe.items():
            part = MIMEBase("application", "octet-stream")
            part.set_payload(buffer_xlsx.read())
            encoders.encode_base64(part)
            part.add_header(
                "Content-Disposition",
                f"attachment; filename={nome_arquivo}",
            )
            mensagem.attach(part)

        try:
            servidor = smtplib.SMTP(servidor_smtp, porta_smtp)
            servidor.starttls()
            servidor.login(email_remetente, senha_remetente)
            servidor.send_message(mensagem)
            print(f"Email enviado para {email_destino} com sucesso!")
        except Exception as e:
            print(f"Erro ao enviar email: {e}")
        finally:
            servidor.quit()